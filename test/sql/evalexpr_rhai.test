# name: test/sql/evalexpr_rhai.test
# description: test evalexpr_rhai extension
# group: [evalexpr_rhai]

# Before we load the extension, this will fail
statement error
SELECT evalexpr_rhai('42')
----
Catalog Error: Scalar Function with name evalexpr_rhai does not exist!

# Require statement will ensure this test is run with this extension loaded
require evalexpr_rhai

require json

# Confirm the extension works
query I
SELECT evalexpr_rhai('42').ok::integer
----
42

query I
SELECT evalexpr_rhai('42+4').ok::integer
----
46

query I
SELECT evalexpr_rhai('4.1').ok::float
----
4.1

query I
SELECT evalexpr_rhai('error').error is not null
----
true

query I
SELECT evalexpr_rhai('#{"color": "red", "fruit": "apple"}').ok.color
----
"red"

query I
SELECT evalexpr_rhai('#{"color": "red", "fruit": "apple"}').ok.fruit
----
"apple"

query I
SELECT evalexpr_rhai('context.fruit', {'fruit': 'apple' }).ok
----
"apple"

query I
SELECT evalexpr_rhai('context', {'fruit': 'apple', 'age': 43 }).ok
----
{"age":43,"fruit":"apple"}

query I
select evalexpr_rhai(range::varchar).ok from range(1000) limit 3;
----
0
1
2

query I
select evalexpr_rhai('context.a', { 'a': range}).ok from range(3);
----
0
1
2


statement ok
create table group_membership(group_name text, logic text);

statement ok
insert into group_membership values
    ('managers', 'context.name == "George"'),
    ('shift_leads', 'context.name == "John"'),
    ('employees', 'context.name == "Alex"');

query II
select group_name, evalexpr_rhai(logic, { 'name': 'John'}::json) from group_membership order by 1;
----
employees	false
managers	false
shift_leads	true

statement ok
create table source_indexes as (select range as r from range(1000));

# Define a macro that defines the function.
statement ok
create macro collatz_series_length(n) as
evalexpr_rhai('
   fn collatz_series(n) {
       let count = 0;
       while n > 1 {
         count += 1;
         if n % 2 == 0 {
             n /= 2;
         } else {
             n = n * 3 + 1;
         }
       }
       return count
  }
  collatz_series(context.n)
', {'n': n});

query II
select collatz_series_length(source_indexes.r).ok::bigint as count, source_indexes.r from source_indexes order by 1 desc, 2 limit 10;
----
178	871
173	937
170	703
152	763
152	775
147	859
147	865
147	873
147	879
147	889

query I
select count(*) from (select evalexpr_rhai('"hello"').ok) as data;
----
1

statement ok
CREATE table ids as (select * as n from range(10000))

query I
select count(*) from (select evalexpr_rhai('"hello_' || ids.n || '"').ok from ids) as data;
----
10000

query I
select sum(length(v)) from (select evalexpr_rhai('"hello_' || ids.n || '"').ok as v from ids) as data;
----
118890
